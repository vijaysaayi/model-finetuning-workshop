name: Quick Validation Test

on:
  workflow_dispatch:

jobs:
  test-validation:
    strategy:
      fail-fast: false
      matrix:
        include:
          # AMD64/x86_64 runners
          - os: ubuntu-latest
            arch: amd64
            python-version: "3.9"
          - os: ubuntu-latest
            arch: amd64
            python-version: "3.10"
          - os: ubuntu-latest
            arch: amd64
            python-version: "3.11"
          - os: ubuntu-latest
            arch: amd64
            python-version: "3.12"
          - os: ubuntu-latest
            arch: amd64
            python-version: "3.13"
          - os: windows-latest
            arch: amd64
            python-version: "3.9"
          - os: windows-latest
            arch: amd64
            python-version: "3.10"
          - os: windows-latest
            arch: amd64
            python-version: "3.11"
          - os: windows-latest
            arch: amd64
            python-version: "3.12"
          - os: windows-latest
            arch: amd64
            python-version: "3.13"

    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Display system info
        run: |
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import platform; print(f'Machine: {platform.machine()}')"
          python -c "import platform; print(f'Processor: {platform.processor()}')"
        shell: bash
      
      - name: Create virtual environment
        run: python -m venv venv
      
      - name: Activate venv (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source venv/bin/activate
          echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV
      
      - name: Activate venv (Windows)  
        if: runner.os == 'Windows'
        run: |
          .\venv\Scripts\Activate.ps1
          $env:PATH = "$(Get-Location)\venv\Scripts;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh
      
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      
      - name: Install prerequisites (Windows ARM64)
        if: runner.os == 'Windows' && matrix.arch == 'arm64'
        run: |
          echo "Installing PyTorch 2.7.0 with ARM native builds for Windows ARM64..."
          pip install torch==2.7.0 --index-url https://download.pytorch.org/whl/cpu --force-reinstall
          echo "Installing remaining packages from ARM64-specific requirements..."
          pip install -r prerequisites/requirements-arm64.txt
        shell: pwsh
      
      - name: Install prerequisites (Standard)
        if: ${{ !(runner.os == 'Windows' && matrix.arch == 'arm64') }}
        run: pip install -r prerequisites/requirements.txt
      
      - name: Test Unicode/Emoji handling
        run: python validation/test_unicode.py
        env:
          CI: "true"                               # Mark as CI environment
          PYTHONIOENCODING: utf-8
          PYTHONUTF8: 1
      
      - name: Run quick validation test
        run: python validation/quick_test.py
        env:
          CI: "true"                               # Mark as CI environment
          TOKENIZERS_PARALLELISM: false
          HF_HUB_DISABLE_PROGRESS_BARS: 1
          PYTHONIOENCODING: utf-8  # Force UTF-8 encoding for Python
          PYTHONUTF8: 1            # Enable UTF-8 mode for Python 3.7+
          # macOS MPS memory management
          PYTORCH_MPS_HIGH_WATERMARK_RATIO: "0.0"  # Disable MPS memory limit
          PYTORCH_ENABLE_MPS_FALLBACK: "1"         # Fallback to CPU if MPS fails
          # Force CPU-only mode for CI to avoid MPS memory issues
          CUDA_VISIBLE_DEVICES: ""
          # Additional memory management for all platforms
          OMP_NUM_THREADS: "1"                     # Reduce OpenMP threads to save memory
